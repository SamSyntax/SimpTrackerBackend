// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package db

import (
	"context"
	"database/sql"
)

const upsertUserMessage = `-- name: UpsertUserMessage :exec
INSERT INTO user_messages (user_id, keyword_id, count, last_message)
VALUES ($1, $2, $3, $4)
ON CONFLICT (user_id, keyword_id) DO UPDATE
SET count = user_messages.count + EXCLUDED.count,
    last_message = EXCLUDED.last_message,
    updated_at = NOW()
`

type UpsertUserMessageParams struct {
	UserID      sql.NullInt32  `json:"user_id"`
	KeywordID   sql.NullInt32  `json:"keyword_id"`
	Count       sql.NullInt32  `json:"count"`
	LastMessage sql.NullString `json:"last_message"`
}

func (q *Queries) UpsertUserMessage(ctx context.Context, arg UpsertUserMessageParams) error {
	_, err := q.db.ExecContext(ctx, upsertUserMessage,
		arg.UserID,
		arg.KeywordID,
		arg.Count,
		arg.LastMessage,
	)
	return err
}
