// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: streamer.sql

package db

import (
	"context"
	"time"
)

const getStreamerByTwitchID = `-- name: GetStreamerByTwitchID :one
SELECT id, twitch_id, username, access_token, refresh_token, expires_at, created_at, updated_at FROM streamers WHERE twitch_id = $1
`

func (q *Queries) GetStreamerByTwitchID(ctx context.Context, twitchID string) (Streamer, error) {
	row := q.db.QueryRowContext(ctx, getStreamerByTwitchID, twitchID)
	var i Streamer
	err := row.Scan(
		&i.ID,
		&i.TwitchID,
		&i.Username,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStreamers = `-- name: GetStreamers :many
SELECT id, twitch_id, username, access_token, refresh_token, expires_at, created_at, updated_at FROM streamers
`

func (q *Queries) GetStreamers(ctx context.Context) ([]Streamer, error) {
	rows, err := q.db.QueryContext(ctx, getStreamers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Streamer
	for rows.Next() {
		var i Streamer
		if err := rows.Scan(
			&i.ID,
			&i.TwitchID,
			&i.Username,
			&i.AccessToken,
			&i.RefreshToken,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertStreamer = `-- name: UpsertStreamer :one
INSERT INTO streamers (twitch_id, username, access_token, refresh_token, expires_at)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (twitch_id) DO UPDATE SET
    username = EXCLUDED.username,
    access_token = EXCLUDED.access_token,
    refresh_token = EXCLUDED.refresh_token,
    expires_at = EXCLUDED.expires_at,
    updated_at = NOW()
RETURNING id
`

type UpsertStreamerParams struct {
	TwitchID     string    `json:"twitch_id"`
	Username     string    `json:"username"`
	AccessToken  string    `json:"access_token"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) UpsertStreamer(ctx context.Context, arg UpsertStreamerParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertStreamer,
		arg.TwitchID,
		arg.Username,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
