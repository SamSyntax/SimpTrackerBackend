// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: keyword.sql

package db

import (
	"context"
)

const getActiveKeywords = `-- name: GetActiveKeywords :many
SELECT
    id,
    keyword,
    active
FROM keywords
WHERE active = TRUE
`

func (q *Queries) GetActiveKeywords(ctx context.Context) ([]Keyword, error) {
	rows, err := q.db.QueryContext(ctx, getActiveKeywords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Keyword
	for rows.Next() {
		var i Keyword
		if err := rows.Scan(&i.ID, &i.Keyword, &i.Active); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalKeywordsCount = `-- name: GetGlobalKeywordsCount :many
SELECT
  k.id as keyword_id,
  k.keyword,
  SUM(um.count) AS total_count
FROM user_messages um
JOIN keywords k ON um.keyword_id = k.id
GROUP BY k.id, k.keyword
ORDER BY k.id ASC
`

type GetGlobalKeywordsCountRow struct {
	KeywordID  int32  `json:"keyword_id"`
	Keyword    string `json:"keyword"`
	TotalCount int64  `json:"total_count"`
}

func (q *Queries) GetGlobalKeywordsCount(ctx context.Context) ([]GetGlobalKeywordsCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getGlobalKeywordsCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGlobalKeywordsCountRow
	for rows.Next() {
		var i GetGlobalKeywordsCountRow
		if err := rows.Scan(&i.KeywordID, &i.Keyword, &i.TotalCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalKeywordsCountAsc = `-- name: GetGlobalKeywordsCountAsc :many
SELECT
  k.id as keyword_id,
  k.keyword,
  SUM(um.count) AS total_count
FROM user_messages um
JOIN keywords k ON um.keyword_id = k.id
GROUP BY k.id, k.keyword
ORDER BY total_count ASC
`

type GetGlobalKeywordsCountAscRow struct {
	KeywordID  int32  `json:"keyword_id"`
	Keyword    string `json:"keyword"`
	TotalCount int64  `json:"total_count"`
}

func (q *Queries) GetGlobalKeywordsCountAsc(ctx context.Context) ([]GetGlobalKeywordsCountAscRow, error) {
	rows, err := q.db.QueryContext(ctx, getGlobalKeywordsCountAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGlobalKeywordsCountAscRow
	for rows.Next() {
		var i GetGlobalKeywordsCountAscRow
		if err := rows.Scan(&i.KeywordID, &i.Keyword, &i.TotalCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalKeywordsCountDesc = `-- name: GetGlobalKeywordsCountDesc :many
SELECT
  k.id as keyword_id,
  k.keyword,
  SUM(um.count) AS total_count
FROM user_messages um
JOIN keywords k ON um.keyword_id = k.id
GROUP BY k.id, k.keyword
ORDER BY total_count DESC
`

type GetGlobalKeywordsCountDescRow struct {
	KeywordID  int32  `json:"keyword_id"`
	Keyword    string `json:"keyword"`
	TotalCount int64  `json:"total_count"`
}

func (q *Queries) GetGlobalKeywordsCountDesc(ctx context.Context) ([]GetGlobalKeywordsCountDescRow, error) {
	rows, err := q.db.QueryContext(ctx, getGlobalKeywordsCountDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGlobalKeywordsCountDescRow
	for rows.Next() {
		var i GetGlobalKeywordsCountDescRow
		if err := rows.Scan(&i.KeywordID, &i.Keyword, &i.TotalCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKeywordById = `-- name: GetKeywordById :one
SELECT 
  k.id as keyword_id,
  k.keyword,
  SUM(um.count) AS total_count
FROM user_messages um
JOIN keywords k ON um.keyword_id = k.id
WHERE k.id = $1
GROUP BY k.id, k.keyword
`

type GetKeywordByIdRow struct {
	KeywordID  int32  `json:"keyword_id"`
	Keyword    string `json:"keyword"`
	TotalCount int64  `json:"total_count"`
}

func (q *Queries) GetKeywordById(ctx context.Context, id int32) (GetKeywordByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getKeywordById, id)
	var i GetKeywordByIdRow
	err := row.Scan(&i.KeywordID, &i.Keyword, &i.TotalCount)
	return i, err
}

const upsertKeyword = `-- name: UpsertKeyword :one
INSERT INTO keywords (keyword)
VALUES ($1)
ON CONFLICT (keyword) DO UPDATE SET keyword = EXCLUDED.keyword
RETURNING id
`

func (q *Queries) UpsertKeyword(ctx context.Context, keyword string) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertKeyword, keyword)
	var id int32
	err := row.Scan(&id)
	return id, err
}
